#!/bin/sh
#
#
#	Tungsten OCF RA. 
#
# Copyright (c) 2011 Narayan Newton All Rights Reserved
#
# Copyright (c) 2004 SUSE LINUX AG, Lars Marowsky-Br√©e
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#


#######################################################################
# Initialization:

. ${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="Tungsten" version="1.0">
<version>1.0</version>

<longdesc lang="en">
OCF RA For Tungsten Replicator
</longdesc>
<shortdesc lang="en">Tungsten Replicator</shortdesc>

<parameters>
<parameter name="state" unique="1">
<longdesc lang="en">
Location to store the resource state in.
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${HA_VARRUN}/Tungsten-{OCF_RESOURCE_INSTANCE}.state" />
</parameter>

<parameter name="user" unique="1">
<longdesc lang="en">
The user Tungsten is running as. This user will be sudoed to to perform actions, so
the HA user will have to be able to sudo to this user.
</longdesc>
<shortdesc lang="en">The user Tungsten is running as</shortdesc>
<content type="string" default="tungsten" />
</parameter>

<parameter name="path" unique="1">
<longdesc lang="en">
The path to the tungsten replicator bin directory.
</longdesc>
<shortdesc lang="en">The path to the tungsten replicator binaries</shortdesc>
<content type="string" default="/home/tungsten/bin" />
</parameter>

<parameter name="service" unique="1">
<longdesc lang="en">
The name of the service we will be managing, the default is "default", but
if you have named your service put that name here.
</longdesc>
<shortdesc lang="en">Replicator Service Name</shortdesc>
<content type="string" default="default" />
</parameter>

<parameter name="type" unique="1">
<longdesc lang="en">
The type of replication we will be managing, master-master, master-slave or direct.
</longdesc>
<shortdesc lang="en">Replication Type</shortdesc>
<content type="string" default="master-master" />
</parameter>
</parameters>

<actions>
<action name="start"        timeout="20" />
<action name="stop"         timeout="20" />
<action name="monitor"      timeout="20" interval="10" depth="0"/>
<action name="reload"       timeout="20" />
<action name="promote"      timeout="20" />
<action name="demote"       timeout="20" />
<action name="validate-all" timeout="20" />
<action name="meta-data"    timeout="5" />
</actions>
</resource-agent>
END
}

#######################################################################

# don't exit on TERM, to test that lrmd makes sure that we do exit
trap sigterm_handler TERM
sigterm_handler() {
	ocf_log info "Did you just try to SIGTERM an OCF RA? For shame....shame"
	return
}

tungsten_usage() {
	cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

tungsten_start() {
    #Check if we are already started, if we are do nothing
    tungsten_monitor
    if [ $? =  $OCF_SUCCESS ]; then
    	return $OCF_SUCCESS
    fi

    #Try to start our service
    ocf_log debug "Trying to start the service"
    $TREPCTL -service $OCF_RESKEY_service start
    if [ $? -ne 0 ]; then
        return $OCF_ERR_GENERIC
    else
        return $OCF_SUCCESS
    fi
}

tungsten_stop() {
    #Are we already stopped? If so, do nothing
    tungsten_monitor
    if [ $? = $OCF_NOT_RUNNIN ]; then
       return $OCF_SUCCESS
    fi

    ocf_log debug "Trying to stop the service"
    $TREPCTL -service $OCF_RESKEY_service stop
    if [ $? -ne 0 ]; then
        return $OCF_ERR_GENERIC
    else
        return $OCF_SUCCESS
    fi
}

tungsten_monitor() {

    service_TEXT="`$TREPCTL -service $OCF_RESKEY_service status`"
    if [ $? -ne 0 ]; then 
        return $OCF_NOT_RUNNING
    fi

    if [ -z "`cat $service_TEXT | grep started | grep true`" ]; then
        ocf_log debug "The service text does not include a correct started line"
        return $OCF_NOT_RUNNING
    fi

    if [ -z "`cat $service_TEXT | grep state | grep ONLINE`" ]; then
        ocf_log debug "The service text does not include a correct state line"
        return $OCF_NOT_RUNNING
    fi

    if [ -n "`cat $service_TEXT | grep role | grep master`" ]; then
        return $OCF_RUNNING_MASTER
    fi
    
    #do more specific service checks
	return $OCF_SUCCESS
}

tungsten_validate() {
    if [ -n "$OCF_RESKEY_user" ]; then
        id $OCF_RESKEY_user &> /dev/null
        if [ $? -ne 0 ]; then
            exit $OCF_ERR_ARGS
        fi
    else
        exit $OCF_ERR_ARGS
    fi

    if [ -n "$OCF_RESKEY_path" ]; then
        if [ ! -d "$OCF_RESKEY_path" ]; then
            exit $OCF_ERR_ARGS
        else
           TREPCTL="sudo -u ${OCF_RESKEY_user} ${OCF_RESKEY_path}/trepctl"
        fi
    else
       exit $OCF_ERR_ARGS
    fi

    if [ -n "$OCF_RESKEY_service" ]; then
        $TREPCTL -service $OCF_RESKEY_service status
        if [ $? -ne 0 ]; then
            exit $OCF_ERR_ARGS
        fi
    else
        exit $OCF_ERR_ARGS
    fi

    if [ -z "$OCF_RESKEY_type" ]; then
        exit $OCF_ERR_ARGS
    fi

    return $OCF_SUCCESS
}

tungsten_demote() {
    local rc

    # exit immediately if configuration is not valid
    tungsten_validate || exit $?

    # test the resource's current state
    foobar_monitor
    rc=$?
    case "$rc" in)
        "$OCF_SUCCESS")
            # Running as slave. Normal, expected behavior.
            ocf_log debug "Resource is currently running as Slave"
            ;;
        "$OCF_RUNNING_MASTER")
            # Already a master. Unexpected, but not a problem.
            ocf_log info "Resource is already running as Master"
            return $OCF_SUCCESS
            ;;
        "$OCF_NOT_RUNNING")
            # Currently not running. Need to start before promoting.
            ocf_log info "Resource is currently not running"
            foobar_start
            ;;
        *)
            # Failed resource. Let the cluster manager recover.
            ocf_log err "Unexpected error, cannot promote"
            exit $rc
            ;;
    esac

    #First pass at codifying a simple failover
    #log_position="`$TREPCTL flush | grep -o [0-9]+^`"
    #if [ $? -ne 0 ]; then
    #    return $OCF_ERR_GENERIC
    #fi
    #if [ -z "$log_position" [; then
    #    return $OCF_ERR_GENERIC
    #fi
    #ocf_run "$TREPCTL -host $OCF_RESKEY_CRM_meta_migrate_target wait -applied $log_position" || exit $OCF_ERR_GENERIC
    #ocf_run "$TREPCTL offline" || exit $OCF_ERR_GENERIC
    #ocf_run "$TREPCTL -host $OCF_RESKEY_CRM_meta_migrate_target offline" || exit $OCF_ERR_GENERIC
    #ocf_run "$TREPCTL -host $OCF_RESKEY_CRM_meta_migrate_target setrole -role master" || exit $OCF_ERR_GENERIC
    #ocf_run "$TREPCTL -host $OCF_RESKEY_CRM_meta_migrate_target online" || exit $OCF_ERR_GENERIC

    ocf_run "$TREPCTL setrole -role slave

    return $OCF_SUCCESS

}

tungsten_promote() {
    local rc

    # exit immediately if configuration is not valid
    tungsten_validate || exit $?

    # test the resource's current state
    foobar_monitor
    rc=$?
    case "$rc" in)
        "$OCF_SUCCESS")
            # Running as slave. Normal, expected behavior.
            ocf_log debug "Resource is currently running as Slave"
            ;;
        "$OCF_RUNNING_MASTER")
            # Already a master. Unexpected, but not a problem.
            ocf_log info "Resource is already running as Master"
            return $OCF_SUCCESS
            ;;
        "$OCF_NOT_RUNNING")
            # Currently not running. Need to start before promoting.
            ocf_log info "Resource is currently not running"
            foobar_start
            ;;
        *)
            # Failed resource. Let the cluster manager recover.
            ocf_log err "Unexpected error, cannot promote"
            exit $rc
            ;;
    esac

    #First pass at codifying a simple failover
    log_position="`$TREPCTL flush | grep -o [0-9]+^`"
    if [ $? -ne 0 ]; then
        return $OCF_ERR_GENERIC
    fi
    if [ -z "$log_position" [; then
        return $OCF_ERR_GENERIC
    fi
    ocf_run "$TREPCTL -host $OCF_RESKEY_CRM_meta_migrate_target wait -applied $log_position" || exit $OCF_ERR_GENERIC
    ocf_run "trepctl offline" || exit $OCF_ERR_GENERIC
    ocf_run "trepctl -host $OCF_RESKEY_CRM_meta_migrate_target offline" || exit $OCF_ERR_GENERIC
    ocf_run "trepctl -host $OCF_RESKEY_CRM_meta_migrate_target setrole -role master" || exit $OCF_ERR_GENERIC
    ocf_run "trepctl -host $OCF_RESKEY_CRM_meta_migrate_target online" || exit $OCF_ERR_GENERIC

    ocf_run "$TREPCTL setrole -role master

    return $OCF_SUCCESS
}

: ${OCF_RESKEY_CRM_meta_interval=0}
: ${OCF_RESKEY_CRM_meta_globally_unique:="true"}

if [ "x$OCF_RESKEY_state" = "x" ]; then
    if [ ${OCF_RESKEY_CRM_meta_globally_unique} = "false" ]; then
	state="${HA_VARRUN}/Tungsten-${OCF_RESOURCE_INSTANCE}.state"
	
	# Strip off the trailing clone marker
	OCF_RESKEY_state=`echo $state | sed s/:[0-9][0-9]*\.state/.state/`
    else 
	OCF_RESKEY_state="${HA_VARRUN}/Tungsten-${OCF_RESOURCE_INSTANCE}.state"
    fi
fi



case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		tungsten_start;;
stop)		tungsten_stop;;
monitor)	tungsten_monitor;;
promote)	tungsten_promote;;
demote)		tungsten_demote;;
reload)		tungsten_start;;
validate-all)	tungsten_validate;;

usage|help)	tungsten_usage
		exit $OCF_SUCCESS
		;;
*)		tungsten_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc

